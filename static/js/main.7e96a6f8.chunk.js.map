{"version":3,"sources":["components/CourseViewer.tsx","components/ControlPanel.tsx","components/SemesterViewer.tsx","components/CourseListViewer.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["CourseViewer","course","Col","name","prof","prereq","credits","ControlPanel","setCourse","courseVal","courseID","setID","courseDeck","addCourse","removeCourse","setSem","sem","addSem","removeSem","resetSems","clearSem","renameSem","semDeck","semIndex","setSemIndex","ButtonGroup","Button","variant","size","onClick","length","newSemName","holderVal","prompt","semName","courseLoad","SemesterViewer","x","listCourses","map","val","ListGroup","Item","id","Row","CourseListViewer","courseDeckVal","coursesNeeded","coursesTaken","taken","y","z","unfulfilledListCourses","fulfilledListCourses","horizontal","className","App","document","title","useState","courseList","setSemDeck","activeSemester","setActiveSemester","activeSemesterIndex","setActiveSemesterIndex","activeCourse","setActiveCourse","activeID","setActiveID","Container","newCourse","contains","newSemDeck","alert","newCourseLoad","newSem","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.7e96a6f8.chunk.js","sourcesContent":["\nimport React from \"react\";\nimport {Col} from \"react-bootstrap\";\nimport { Course } from \"../interfaces/course\";\nexport function CourseViewer({course}: {course: Course}): JSX.Element {\n\treturn <Col>\n\t\t<h2>Class Select</h2>\n\t\t<div>Class: {course.name}</div>\n\t\t<div>Professor: {course.prof}</div>\n\t\t<div>Prereq: {course.prereq}</div>\n\t\t<div>Credits: {course.credits}</div>\n\t</Col>;\n}\n","import React from \"react\";\nimport {Button, Col, ButtonGroup} from \"react-bootstrap\";\nimport { Course } from \"../interfaces/course\";\nimport { Semester } from \"../interfaces/semester\";\n\nexport function ControlPanel({setCourse, courseVal, courseID, setID, courseDeck, addCourse, removeCourse, setSem, sem, addSem, removeSem, resetSems, clearSem, renameSem, semDeck, semIndex, setSemIndex}:{setCourse: (c: Course)=>void, courseVal: Course, courseID: number, setID: (r: number)=>void, courseDeck: Course[], addCourse: (m: Course)=> void, removeCourse: (o: Course)=>void, setSem: (z: Semester)=>void, sem: Semester, addSem: (j: Semester) => void, removeSem: (l: Semester) => void, resetSems:(q: void) => void, clearSem: (n: void) => void, renameSem: (p: void) => void, semDeck: Semester[], semIndex: number, setSemIndex: (k: number) => void}): JSX.Element {\n\treturn <Col>\n\t\t<h2>Control Panel</h2>\n\n\t\t\n\t\t<ButtonGroup>\n\t\t<Button variant=\"outline-secondary\" size=\"sm\" onClick={\n\t\t\t() => {\n\t\t\t\tif(courseID != 0){\n\t\t\t\t\tsetCourse(courseDeck[courseID-1]);\n\t\t\t\t\tsetID(courseID - 1);\n\t\t\t\t}\n\t\t\t}\n\t\t}>Previous Class</Button>\n\t\t<Button variant=\"outline-secondary\" size=\"sm\" onClick= {\n\t\t\t() => {\n\t\t\t\taddCourse(courseVal);\n\t\t\t}\n\t\t}>Add Class</Button>\n\t\t<Button variant=\"outline-secondary\" size=\"sm\" onClick ={\n\t\t\t() => {\n\t\t\t\tremoveCourse(courseVal);\n\t\t\t}\n\t\t}>Remove Class</Button>\n\t\t<Button variant=\"outline-secondary\" size=\"sm\" onClick={ \n\t\t\t() => {\n\t\t\t\tif(courseID != courseDeck.length-1){\n\t\t\t\t\tsetCourse(courseDeck[courseID + 1]); \n\t\t\t\t\tsetID(courseID +1);\n\t\t\t\t}\n\t\t\t}\n\t\t}>Next Class</Button>\n\t\t</ButtonGroup>\n\n\n\t\t<br></br>\n\n\n\t\t<ButtonGroup>\n\t\t<Button variant=\"outline-secondary\" size=\"sm\" onClick ={\n\t\t\t() => {\n\t\t\t\t\n\t\t\t\tif(semIndex != 0){\n\t\t\t\t\tsetSem(semDeck[semIndex-1]);\n\t\t\t\t\tsetSemIndex(semIndex -1);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\t\t}>Previous Semester</Button>\n\t\t<Button variant=\"outline-secondary\" size=\"sm\" onClick ={\n\t\t\t() => {\n\t\t\t\tlet newSemName = \"\";\n\t\t\t\tconst holderVal = prompt(\"Enter Name:\");\n\t\t\t\tif(holderVal != null){\n\t\t\t\t\tnewSemName = holderVal;\n\t\t\t\t}\n\t\t\t\taddSem({semName: newSemName, courseLoad: []});\n\t\t\t}\n\t\t}>Add Semester </Button>\n\t\t<Button variant=\"outline-secondary\" size=\"sm\" onClick ={\n\t\t\t() => {\n\t\t\t\tclearSem();\n\t\t\t}\n\t\t}>Clear Semester</Button>\n\t\t<Button variant=\"outline-secondary\" size=\"sm\" onClick ={\n\t\t\t() => {\n\t\t\t\tif(semIndex != semDeck.length -1){\n\t\t\t\t\tsetSem(semDeck[semIndex+1]);\n\t\t\t\t\tsetSemIndex(semIndex + 1);\n\t\t\t\t}\n\t\t\t}\n\t\t}>Next Semester</Button>\n\t\t</ButtonGroup>\n\n\n\t\t<br></br>\n\n\t\t<ButtonGroup>\n\t\t<Button variant=\"outline-secondary\" size=\"sm\" onClick ={\n\t\t\t() => {\n\t\t\t\trenameSem();\n\t\t\t}\n\t\t}>Rename Semester</Button>\n\t\t<Button variant=\"outline-secondary\" size=\"sm\" onClick ={\n\t\t\t() => {\n\t\t\t\tremoveSem(sem);\n\t\t\t}\n\t\t}>Remove Semester</Button>\n\t\t<Button variant=\"outline-secondary\" size=\"sm\" onClick ={\n\t\t\t() =>{\n\t\t\t\tresetSems();\n\t\t\t}\n\t\t}>Reset Semesters</Button>\n\t\t</ButtonGroup>\n\t</Col>;\n}","import React from \"react\";\nimport {Row} from \"react-bootstrap\";\nimport { Course } from \"../interfaces/course\";\n//import {Semester} from \"../interfaces/semester\";\nimport { Semester } from \"../interfaces/semester\";\nimport { ListGroup } from \"react-bootstrap\";\n\n\nexport function SemesterViewer({sem}: {sem: Semester}): JSX.Element {\n\t/* Old versions of geting courseList return val....\n\t//setup for courselist val:\n\tlet retval = \"\";\n\tfor(const x in sem.courseLoad){\n\t\tretval += sem.courseLoad[x].name + \"\\n, \";\n\t}\n\t//\n\tlet courses: string[] = [];\n\tfor(const x in sem.courseLoad){\n\t\tcourses = [...courses, sem.courseLoad[x].name];\n\t}\n\t\n\tconst listCourses = courses.map((string) => \n\t\t<li key={string.length}>{string}</li>\n\t);\n\t//setup for courses ordered list:\n\tlet courses: Course[] = [];\n\tcourses = sem.courseLoad;\n\tconst listCourses = courses.map((val)=>\n\t\t<li key ={val.id}>{val.name}</li>\n\t);\n\t*/\n\n\n\t//setup for credits val:\n\tlet credits = 0;\n\tfor(const x in sem.courseLoad){\n\t\tcredits += sem.courseLoad[x].credits;\n\t}\n\t\n\t//setup for course list display:\n\tlet courses: Course[] = [];\n\tcourses = sem.courseLoad;\n\tconst listCourses = courses.map((val)=>\n\t\t<ListGroup.Item variant = \"dark\" key ={val.id}>{val.name}</ListGroup.Item>\n\t);\n\n\treturn <Row>\n\t\t<h2>Semesters:</h2>\n\t\t<h5>Total Credits: {credits}</h5>\n\t\t<h6>{sem.semName}</h6>\n\t\t<ListGroup>{listCourses}</ListGroup>\n\t</Row>;\n}","import React from \"react\";\nimport {Row, ListGroup} from \"react-bootstrap\";\nimport { Semester } from \"../interfaces/semester\";\nimport {Course} from \"../interfaces/course\";\n\n/*old way of getting course list\nlet retval = \"\";\nfor(const x in courseList){ \n\t//checked below after Prof suggestions, is not necessary... keeping commented just in case...\n\t//courseList as Course[];\n\tretval += JSON.stringify(courseList[x].name);\n\tretval+= \", \";\n}\n*/\nexport function CourseListViewer({courseDeckVal, semDeck}: {courseDeckVal: Course[], semDeck: Semester[]}): JSX.Element {\n\n\t//setup for courses taken and courses needed lists\n\tlet coursesNeeded: Course[] = [];\n\tlet coursesTaken: Course[] = [];\n\tfor(const x in courseDeckVal){\n\t\tlet taken = false;\n\t\tfor(const y in semDeck){\n\t\t\tfor(const z in semDeck[y].courseLoad){\n\t\t\t\tif(courseDeckVal[x] == semDeck[y].courseLoad[z]){\n\t\t\t\t\ttaken = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif(taken == false){\n\t\t\tcoursesNeeded = [...coursesNeeded, courseDeckVal[x]];\n\t\t}else{\n\t\t\tcoursesTaken = [...coursesTaken, courseDeckVal[x]];\n\t\t}\n\t}\n\n\t//setup for course list listGroup display:\n\tlet courses: Course[] = [];\n\tcourses = courseDeckVal;\n\tconst listCourses = courses.map((val)=>\n\t\t<ListGroup.Item variant = \"dark\" key ={val.id}>{val.name}</ListGroup.Item>\n\t);\n\t//setup for Unfulfilled course list listGroup display:\n\tconst unfulfilledListCourses = coursesNeeded.map((val)=>\n\t\t<ListGroup.Item variant = \"dark\" key ={val.id}>{val.name}</ListGroup.Item>\n\t);\n\tconst fulfilledListCourses = coursesTaken.map((val)=>\n\t\t<ListGroup.Item variant = \"dark\" key ={val.id}>{val.name}</ListGroup.Item>\n\t);\n\n\treturn <Row>\n\t\t<h1>Course List:</h1>\n\t\t<ListGroup horizontal className= \"justify-content-center\">{listCourses}</ListGroup>\n\t\t<h2>Unfulfilled Requirements:</h2>\n\t\t<ListGroup horizontal className= \"justify-content-center\">{unfulfilledListCourses}</ListGroup>\n\t\t<h2>Fulfilled Requirements:</h2>\n\t\t<ListGroup horizontal className= \"justify-content-center\">{fulfilledListCourses}</ListGroup>\n\t</Row>;\n}","//imports\nimport React, { useState } from \"react\";\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport {Container, Row} from \"react-bootstrap\";\n//assets\nimport courseList from \"./assets/classList.json\";\n//components\nimport { CourseViewer } from \"./components/CourseViewer\";\nimport { ControlPanel } from \"./components/ControlPanel\";\nimport { SemesterViewer } from \"./components/SemesterViewer\";\nimport { CourseListViewer } from \"./components/CourseListViewer\";\n//interfaces\nimport { Course } from \"./interfaces/course\";\n//import { Semester } from \"./interfaces/semester\";\nimport { Semester } from \"./interfaces/semester\";\n\n\n\n\n\n\nfunction App (): JSX.Element {\n\tdocument.title = \"UD CISC Scheduler Team 18\";\n\n\t//USE STATES:\n\t//List use states which are hold our list of semesters and course list\n\tconst [courseDeck] = useState<Course[]>(courseList);\n\tconst [semDeck, setSemDeck] = useState<Semester[]>([{semName: \"New Semester\", courseLoad: []}]);\n\t//semester use states\n\tconst [activeSemester, setActiveSemester] = useState<Semester>(semDeck[0]);\n\tconst [activeSemesterIndex, setActiveSemesterIndex] = useState<number>(0);\n\t//class use states\n\tconst [activeCourse, setActiveCourse] = useState<Course>(courseList[0]);\n\tconst [activeID, setActiveID] = useState<number>(0);\n\n\n\t//FUNCTIONS:\n\n\t//Adds a new semester to our semester list use state, called in control panel.\n\tfunction addSem(newSem: Semester){\n\t\tsetSemDeck([...semDeck, newSem]);\n\t}\n\t//Removes current selected semester from the semester deck use state, called in control panel...\n\tfunction removeSem(newSem: Semester){\n\t\tif(semDeck.length == 1){\n\t\t\talert(\"Only 1 Semester, cannot delete.\");\n\t\t}else{\n\n\t\t\n\t\t\tlet newSemDeck: Semester[] = [];\n\t\t\tfor(const x in semDeck){\n\t\t\t\tif(semDeck[x].semName != newSem.semName){\n\t\t\t\t\tnewSemDeck = [...newSemDeck, semDeck[x]];\n\t\t\t\t}\n\t\t\t}\n\t\t\tsetSemDeck(newSemDeck);\n\t\t\tsetActiveSemester(newSemDeck[0]);\n\t\t\tsetActiveSemesterIndex(0);\n\t\t}\n\t}\n\t//adds current activeCourse to current active semester and updates semDeck. called in Control Panel\n\tfunction addCourse(newCourse: Course){\n\t\tlet contains = false;\n\t\tfor( const x in activeSemester.courseLoad){\n\t\t\tif (activeSemester.courseLoad[x] == newCourse){\n\t\t\t\tcontains = true;\n\t\t\t}\n\t\t}\n\t\tif(contains == false){\n\t\t\tlet newSemDeck: Semester[] = [];\n\t\t\tfor(const x in semDeck){\n\t\t\t\tif(semDeck[x] != activeSemester){\n\t\t\t\t\tnewSemDeck = [...newSemDeck, semDeck[x]];\n\t\t\t\t}else{\n\t\t\t\t\tnewSemDeck = [...newSemDeck, {semName: activeSemester.semName, courseLoad: [...activeSemester.courseLoad, newCourse]}];\n\t\t\t\t}\n\t\t\t}\n\t\t\tsetSemDeck(newSemDeck);\n\t\t\tsetActiveSemester(newSemDeck[activeSemesterIndex]);\n\t\t}else{\n\t\t\talert(\"Class already added!\");\n\t\t}\n\t}\n\t//clears semester of all classes and updates the relating use states... called in control panel\n\tfunction clearSemester(){\n\t\tlet newSemDeck: Semester[] = [];\n\t\tfor(const x in semDeck){\n\t\t\tif(semDeck[x] != activeSemester){\n\t\t\t\tnewSemDeck = [...newSemDeck, semDeck[x]];\n\t\t\t}else{\n\t\t\t\tnewSemDeck = [...newSemDeck, {semName: activeSemester.semName, courseLoad: []}];\n\t\t\t}\n\t\t}\n\t\tsetSemDeck(newSemDeck);\n\t\tsetActiveSemester(newSemDeck[activeSemesterIndex]);\n\t}\n\t//deletes and clears all semesters updating the corresponding use states... called in control panel\n\tfunction resetSems(){\n\t\tconst newSemDeck: Semester[] = [{semName: \"My New Semester\", courseLoad: []}];\n\t\tsetSemDeck(newSemDeck);\n\t\tsetActiveSemesterIndex(0);\n\t\tsetActiveSemester(newSemDeck[0]);\n\t}\n\t//removes the current active course from the current active semester and updates the use states accordingly... called in control panel\n\tfunction removeCourse( newCourse: Course){\n\t\tlet newSemDeck: Semester[] = [];\n\t\tfor(const x in semDeck){\n\t\t\tif(semDeck[x] != activeSemester){\n\t\t\t\tnewSemDeck = [...newSemDeck, semDeck[x]];\n\t\t\t}else{\n\t\t\t\tlet newCourseLoad: Course[] = [];\n\t\t\t\tfor(const y in semDeck[x].courseLoad){\n\t\t\t\t\tif(semDeck[x].courseLoad[y] != newCourse){\n\t\t\t\t\t\tnewCourseLoad = [...newCourseLoad, semDeck[x].courseLoad[y]];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tnewSemDeck = [...newSemDeck, {semName: semDeck[x].semName, courseLoad: newCourseLoad}];\n\t\t\t}\n\t\t}\n\t\tsetSemDeck(newSemDeck);\n\t\tsetActiveSemester(newSemDeck[activeSemesterIndex]);\n\t}\n\t//function renames the current active semester and updates the corresponding usestates... called in control panel\n\tfunction renameSemester(){\n\t\tlet newSemDeck: Semester[] = [];\n\t\tlet newSemName = \"\";\n\t\t\t\tconst holderVal = prompt(\"Enter Name:\");\n\t\t\t\tif(holderVal != null){\n\t\t\t\t\tnewSemName = holderVal;\n\t\t\t\t}\n\t\t\t\tfor(const x in semDeck){\n\t\t\t\t\tif(semDeck[x] != activeSemester){\n\t\t\t\t\t\tnewSemDeck = [...newSemDeck, semDeck[x]];\n\t\t\t\t\t}else{\n\t\t\t\t\t\tnewSemDeck = [...newSemDeck, {semName: newSemName, courseLoad: semDeck[x].courseLoad}];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tsetSemDeck(newSemDeck);\n\t\t\t\tsetActiveSemester(newSemDeck[activeSemesterIndex]);\n\t}\n\n\n\n\t//RETURN VALUE:\n\treturn (\n\t\t<Container className=\"App\">\n\t\t\t<Row>\n\t\t\t\t<h1>UD CIS Scheduler Team 18 Andrew McCracken</h1>\n\t\t\t\t<CourseListViewer courseDeckVal ={courseDeck} semDeck = {semDeck}></CourseListViewer>\n\t\t\t</Row>\n\t\t\t<Row>\n\t\t\t\t<ControlPanel \n\t\t\t\tsetCourse={setActiveCourse} \n\t\t\t\tcourseVal = {activeCourse} \n\t\t\t\tcourseID = {activeID} setID = {setActiveID}\n\t\t\t\tcourseDeck = {courseDeck}\n\t\t\t\taddCourse = {addCourse}\n\t\t\t\tremoveCourse = {removeCourse}  \n\t\t\t\tsetSem = {setActiveSemester}\n\t\t\t\tsem = {activeSemester}\n\t\t\t\taddSem = {addSem}\n\t\t\t\tremoveSem = {removeSem}\n\t\t\t\tclearSem = {clearSemester}\n\t\t\t\tresetSems = {resetSems}\n\t\t\t\trenameSem = {renameSemester}\n\t\t\t\tsemDeck = {semDeck}\n\t\t\t\tsemIndex = {activeSemesterIndex}\n\t\t\t\tsetSemIndex = {setActiveSemesterIndex} ></ControlPanel>\n\t\t\t\t<CourseViewer course ={activeCourse} ></CourseViewer>\n\t\t\t</Row>\n\t\t\t<SemesterViewer sem = {activeSemester}></SemesterViewer>\n\t\t</Container>\n\t);\n  \n\n}\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}