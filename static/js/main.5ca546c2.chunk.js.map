{"version":3,"sources":["components/CardViewer.tsx","components/ControlPanel.tsx","components/SemesterViewer.tsx","components/ClassListViewer.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ClassViewer","card","Col","name","ControlPanel","setCard","cardVal","ID","setID","listSize","setSem","semID","setSemID","semListSize","sem","semNameChange","Button","onClick","CARDS","classA","classB","classC","classD","classE","classF","classG","classH","classI","classJ","alert","semList","onChange","event","target","value","SemesterViewer","retval","Row","x","JSON","stringify","ClassListViewer","App","document","title","useState","semesterList","activeSemester","setActiveSemester","activeSemesterID","setActiveSemesterID","length","classList","classListSize","activeCard","setActiveCard","activeID","setActiveID","Container","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.5ca546c2.chunk.js","sourcesContent":["\nimport React from \"react\";\nimport {Col} from \"react-bootstrap\";\nimport { Card } from \"../interfaces/card\";\nexport function ClassViewer({card}: {card: Card}): JSX.Element {\n\treturn <Col>\n\t\t<h2>Class Select</h2>\n\t\t<div>Class: {card.name}</div>\n\t</Col>;\n}\n","import React from \"react\";\nimport {Button, Col} from \"react-bootstrap\";\nimport { Card } from \"../interfaces/card\";\nimport CARDS from \"../assets/classList.json\";\nimport { Semester } from \"../interfaces/semester\";\nimport semList from \"../assets/semesterList.json\";\n\nexport function ControlPanel({setCard, cardVal, ID, setID, listSize, setSem, semID, setSemID, semListSize, sem}:{setCard: (c: Card)=>void, cardVal: Card, ID: number, setID: (r: number)=>void, listSize: number, setSem: (z: Semester)=>void, semID: number, setSemID: (q: number)=>void, semListSize: number, sem: Semester}): JSX.Element {\n\tlet semNameChange = \"\";\n\treturn <Col>\n\t\t<h2>ControlPanel</h2>\n\t\t<Button onClick={\n\t\t\t() => {\n\t\t\t\tif(ID != 0){\n\t\t\t\t\tsetCard(CARDS[ID-1]);\n\t\t\t\t\tsetID(ID - 1);\n\t\t\t\t}\n\t\t\t}\n\t\t}>Previous Class</Button>\n\t\t<Button onClick= {\n\t\t\t() => {\n\t\t\t\tif(sem.classA == cardVal.name || sem.classB == cardVal.name || sem.classC == cardVal.name || sem.classD == cardVal.name || sem.classE == cardVal.name || sem.classF == cardVal.name || sem.classG == cardVal.name || sem.classH == cardVal.name || sem.classI == cardVal.name || sem.classJ == cardVal.name){\n\t\t\t\t\talert(\"Class already scheduled\");\n\t\t\t\t}else if(sem.classA == \"none\"){\n\t\t\t\t\tsem.classA = cardVal.name;\n\t\t\t\t}else if(sem.classB == \"none\"){\n\t\t\t\t\tsem.classB = cardVal.name;\n\t\t\t\t}else if(sem.classC == \"none\"){\n\t\t\t\t\tsem.classC = cardVal.name;\n\t\t\t\t}else if(sem.classD == \"none\"){\n\t\t\t\t\tsem.classD = cardVal.name;\n\t\t\t\t}else if(sem.classE == \"none\"){\n\t\t\t\t\tsem.classE = cardVal.name;\n\t\t\t\t}else if(sem.classF == \"none\"){\n\t\t\t\t\tsem.classF = cardVal.name;\n\t\t\t\t}else if(sem.classG == \"none\"){\n\t\t\t\t\tsem.classG = cardVal.name;\n\t\t\t\t}else if(sem.classH == \"none\"){\n\t\t\t\t\tsem.classH = cardVal.name;\n\t\t\t\t}else if(sem.classI == \"none\"){\n\t\t\t\t\tsem.classI = cardVal.name;\n\t\t\t\t}else if(sem.classJ == \"none\"){\n\t\t\t\t\tsem.classJ = cardVal.name;\n\t\t\t\t}else{\n\t\t\t\t\talert(\"No empty slots.\");\n\t\t\t\t}\n\t\t\t}\n\t\t}>Add Class</Button>\n\t\t<Button onClick={ \n\t\t\t() => {\n\t\t\t\tif(ID != listSize-1){\n\t\t\t\t\tsetCard(CARDS[ID + 1]); \n\t\t\t\t\tsetID(ID +1);\n\t\t\t\t}\n\t\t\t}\n\t\t}>Next Class</Button>\n\t\t<Button onClick ={\n\t\t\t() => {\n\t\t\t\tif(sem.classA == cardVal.name){\n\t\t\t\t\tsem.classA = \"none\";\n\t\t\t\t}else if(sem.classB == cardVal.name){\n\t\t\t\t\tsem.classB = \"none\";\n\t\t\t\t}else if(sem.classC == cardVal.name){\n\t\t\t\t\tsem.classC = \"none\";\n\t\t\t\t}else if(sem.classD == cardVal.name){\n\t\t\t\t\tsem.classD = \"none\";\n\t\t\t\t}else if(sem.classE == cardVal.name){\n\t\t\t\t\tsem.classE = \"none\";\n\t\t\t\t}else if(sem.classF == cardVal.name){\n\t\t\t\t\tsem.classF = \"none\";\n\t\t\t\t}else if(sem.classG == cardVal.name){\n\t\t\t\t\tsem.classG = \"none\";\n\t\t\t\t}else if(sem.classH == cardVal.name){\n\t\t\t\t\tsem.classH = \"none\";\n\t\t\t\t}else if(sem.classI == cardVal.name){\n\t\t\t\t\tsem.classI = \"none\";\n\t\t\t\t}else if(sem.classJ == cardVal.name){\n\t\t\t\t\tsem.classJ = \"none\";\n\t\t\t\t}\n\t\t\t}\n\t\t}>Remove Class</Button>\n\t\t<br></br>\n\t\t<Button onClick ={\n\t\t\t() => {\n\t\t\t\tif(semID != 0){\n\t\t\t\t\tsetSem(semList[semID-1]);\n\t\t\t\t\tsetSemID(semID -1);\n\t\t\t\t}\n\t\t\t}\n\t\t}>Previous Semester</Button>\n\t\t<Button onClick ={\n\t\t\t() => {\n\t\t\t\tsem.classA = \"none\";\n\t\t\t\tsem.classB = \"none\";\n\t\t\t\tsem.classC = \"none\";\n\t\t\t\tsem.classD = \"none\";\n\t\t\t\tsem.classE = \"none\";\n\t\t\t\tsem.classF = \"none\";\n\t\t\t\tsem.classG = \"none\";\n\t\t\t\tsem.classH = \"none\";\n\t\t\t\tsem.classI = \"none\";\n\t\t\t\tsem.classJ = \"none\";\n\t\t\t}\n\t\t}>Clear Semester</Button>\n\t\t<Button onClick ={\n\t\t\t() => {\n\t\t\t\tif(semID != semListSize -1){\n\t\t\t\t\tsetSem(semList[semID+1]);\n\t\t\t\t\tsetSemID(semID + 1);\n\t\t\t\t}\n\t\t\t}\n\t\t}>Next Semester</Button>\n\t\t<br></br>\n\t\t<input onChange={event => semNameChange = event.target.value}></input>\n\t\t<br></br>\n\t\t<Button onClick ={\n\t\t\t() => {\n\t\t\t\tsem.name = semNameChange;\n\t\t\t\tsetSem(semList[semID]);\n\t\t\t}\n\t\t}>Change Semester Name</Button>\n\t\t\n\t</Col>;\n}","import React from \"react\";\nimport {Row} from \"react-bootstrap\";\nimport {Semester} from \"../interfaces/semester\";\n\n\nexport function SemesterViewer({sem}: {sem: Semester}): JSX.Element {\n\tlet retval = \"\";\n\tretval += sem.name;\n\tretval += \":\\n\";\n\t//sem.classA = \"cisc275\";\n\tif(sem.classA != \"none\"){\n\t\tretval += sem.classA;\n\t\tretval += \"\\n\";\n\t}\n\tif(sem.classB != \"none\"){\n\t\tretval += sem.classB;\n\t\tretval += \"\\n\";\n\t}\n\tif(sem.classC != \"none\"){\n\t\tretval += sem.classC;\n\t\tretval += \"\\n\";\n\t}\n\tif(sem.classD != \"none\"){\n\t\tretval += sem.classD;\n\t\tretval += \"\\n\";\n\t}\n\n\treturn <Row>\n\t\t<h2>Semesters:</h2>\n\t\t<div>{retval}</div>\n\t</Row>;\n}","import React from \"react\";\nimport {Row} from \"react-bootstrap\";\nimport CARDS from \"../assets/classList.json\";\nimport {Card} from \"../interfaces/card\";\n\n\nlet retval = \"\";\n\nfor(const x in CARDS){ \n\tCARDS as Card[];\n\tretval += JSON.stringify(CARDS[x].name);\n\tretval+= \", \";\n}\n\nexport function ClassListViewer(): JSX.Element {\n\treturn <Row>\n\t\t<h1>Class List:</h1>\n\t\t<div>{retval}</div>\n\t</Row>;\n}","//imports\nimport React, { useState } from \"react\";\nimport \"./App.css\";\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport {Container, Row} from \"react-bootstrap\";\n//assets\nimport classList from \"./assets/classList.json\";\nimport semesterList from \"./assets/semesterList.json\";\n//components\nimport { ClassViewer } from \"./components/CardViewer\";\nimport { ControlPanel } from \"./components/ControlPanel\";\nimport { SemesterViewer } from \"./components/SemesterViewer\";\nimport { ClassListViewer } from \"./components/ClassListViewer\";\n//interfaces\nimport { Card } from \"./interfaces/card\";\nimport { Semester } from \"./interfaces/semester\";\n\n\n\n\n\n\nfunction App (): JSX.Element {\n\tdocument.title = \"UD CISC Scheduler Team 18\";\n\t//semester use states\n\tconst [activeSemester, setActiveSemester] = useState<Semester>(semesterList[0]);\n\tconst [activeSemesterID, setActiveSemesterID] = useState<number>(0);\n\tconst [semListSize] = useState<number>(semesterList.length);\n\t//class use states\n\tconst [classListSize] = useState<number>(classList.length);\n\tconst [activeCard, setActiveCard] = useState<Card>(classList[0]);\n\tconst [activeID, setActiveID] = useState<number>(0);\n\treturn (\n\t\t<Container className=\"App\">\n\t\t\t<ClassListViewer></ClassListViewer>\n\t\t\t<Row>\n\t\t\t\t<h1>UD CIS Scheduler Team 18 Andrew McCracken</h1>\n\t\t\t</Row>\n\t\t\t<Row>\n\t\t\t\t<ControlPanel setCard={setActiveCard} cardVal = {activeCard} ID = {activeID} setID = {setActiveID} listSize = {classListSize} setSem = {setActiveSemester} semID = {activeSemesterID} setSemID = {setActiveSemesterID} semListSize ={semListSize} sem = {activeSemester} ></ControlPanel>\n\t\t\t\t<ClassViewer card ={activeCard}></ClassViewer>\n\t\t\t</Row>\n\t\t\t<SemesterViewer sem = {activeSemester}></SemesterViewer>\n\t\t</Container>\n\t);\n  \n\n}\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}